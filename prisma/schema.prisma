generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  email      String?  @unique
  password   String
  role       UserRole @default(USER)
  first_name String?
  last_name  String?
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  created_debtors  Debtor[]  @relation("CreatedBy")
  created_debts    Debt[]    @relation("DebtCreatedBy")
  created_payments Payment[] @relation("PaymentCreatedBy")

  @@map("users")
}

model Debtor {
  id                Int       @id @default(autoincrement())
  first_name        String
  last_name         String
  phone_number      String?
  address           String?
  total_debt        Decimal   @default(0) @db.Decimal(10, 2)
  last_payment_date DateTime?
  is_overdue        Boolean   @default(false)
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  created_by        Int

  // Relations
  creator  User      @relation("CreatedBy", fields: [created_by], references: [id])
  debts    Debt[]
  payments Payment[]

  // Indexes for performance
  @@index([total_debt])
  @@index([created_by])
  @@index([created_at])
  @@index([is_overdue])
  @@index([last_payment_date])
  @@map("debtors")
}

model Debt {
  id          Int      @id @default(autoincrement())
  debtor_id   Int
  amount      Decimal  @db.Decimal(10, 2)
  description String?
  items       Json?    // Store array of items with prices
  created_at  DateTime @default(now())
  created_by  Int

  // Relations
  debtor  Debtor @relation(fields: [debtor_id], references: [id], onDelete: Cascade)
  creator User   @relation("DebtCreatedBy", fields: [created_by], references: [id])

  // Indexes for performance
  @@index([debtor_id])
  @@index([created_at])
  @@map("debts")
}

model Payment {
  id           Int         @id @default(autoincrement())
  debtor_id    Int
  amount       Decimal     @db.Decimal(10, 2)
  payment_type PaymentType @default(CASH)
  note         String?
  created_at   DateTime    @default(now())
  created_by   Int

  // Relations
  debtor  Debtor @relation(fields: [debtor_id], references: [id], onDelete: Cascade)
  creator User   @relation("PaymentCreatedBy", fields: [created_by], references: [id])

  // Indexes for performance
  @@index([debtor_id])
  @@index([created_at])
  @@map("payments")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

enum PaymentType {
  CASH
  CLICK
  CARD
}

model Settings {
  id         Int      @id @default(autoincrement())
  key        String   @unique
  value      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("settings")
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  user_id     Int?
  action      String
  entity_type String
  entity_id   Int?
  old_value   Json?
  new_value   Json?
  ip_address  String?
  user_agent  String?
  created_at  DateTime @default(now())

  @@index([user_id])
  @@index([entity_type, entity_id])
  @@index([created_at])
  @@map("audit_logs")
}

model Notification {
  id         Int              @id @default(autoincrement())
  user_id    Int?
  debtor_id  Int?
  type       NotificationType
  title      String
  message    String
  is_read    Boolean          @default(false)
  created_at DateTime         @default(now())

  @@index([user_id])
  @@index([debtor_id])
  @@index([is_read])
  @@index([created_at])
  @@map("notifications")
}

enum NotificationType {
  OVERDUE_PAYMENT
  PAYMENT_RECEIVED
  DEBT_ADDED
  DEBT_LIMIT_EXCEEDED
}
